"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_lex_runtime_v2_1 = require("@aws-sdk/client-lex-runtime-v2");
const DialogHelpers = require("../../src/sharedLibraries/DialogHelpers");
const CommonUtils = require("../../src/sharedLibraries/CommonUtils");
const TIME_SLOT = "Time";
const TIME_SLOT_VALIDATION_CODE_HOOK_LABEL = "CallIntent_TimeSlot_ValidationCodeHook";
function handler(event) {
    let response = DialogHelpers.passThrough(event);
    /**
     * Determine the correct logic to run based on what code hook the request has come from
     */
    if (event.invocationSource === "DialogCodeHook" /* InvocationSource.DIALOG_CODE_HOOK */) {
        if (event.invocationLabel === TIME_SLOT_VALIDATION_CODE_HOOK_LABEL) {
            // validation on time slot
            response = validateTimeSlot(event);
        }
    }
    else if (event.invocationSource === "FulfillmentCodeHook" /* InvocationSource.FULFILLMENT_CODE_HOOK */) {
        // book the call
        response = fulfilIntent(event);
    }
    return response;
}
exports.handler = handler;
/**
 * For Fulfillment, we will take action on book the call and then send a
 *  response with State of Fulfilled and a DialogAction of CLOSE
 */
const fulfilIntent = (event) => {
    // ****************************
    // ADD LOGIC HERE TO ACTUALLY BOOK THE CALL ....
    //
    // IN THE REAL WORLD WE WOULD BE REACHING OUT TO EXTERNAL SYSTEMS HERE
    // FOR NOW WE'RE JUST GOING TO RESPOND AS IF WE DID BOOK THE CALL
    // *****************************
    const time = CommonUtils.getSessionStateSlotValue(event, TIME_SLOT).interpretedValue;
    return DialogHelpers.fulfillIntent(event.sessionState, event.requestAttributes || {}, [
        {
            contentType: client_lex_runtime_v2_1.MessageContentType.PLAIN_TEXT,
            content: `Your call has been scheduled for ${time}`,
        },
    ]);
};
const validateTimeSlot = (event) => {
    // ****************************
    // LOGIC COULD BE ADDED HERE TO CHECK THIS TIME IS AVAILABLE BY REACHING OUT TO OUR BOOKING SYSTEM
    // THIS WOULD ALLOW US TO RE-PROMPT THE USER FOR A NEW TIME IF NEEDED
    // ****************************
    return DialogHelpers.passThrough(event);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbEludGVudEhhbmRsZXItdjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjYWxsSW50ZW50SGFuZGxlci12Mi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwRUFBbUU7QUFHbkUsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUE7QUFDeEUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLENBQUE7QUFFcEUsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFBO0FBQ3hCLE1BQU0sb0NBQW9DLEdBQUcsd0NBQXdDLENBQUE7QUFFckYsU0FBZ0IsT0FBTyxDQUFDLEtBQTRCO0lBQ2xELElBQUksUUFBUSxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDL0M7O09BRUc7SUFDSCxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsNkRBQXNDLEVBQUU7UUFDaEUsSUFBSSxLQUFLLENBQUMsZUFBZSxLQUFLLG9DQUFvQyxFQUFFO1lBQ2xFLDBCQUEwQjtZQUMxQixRQUFRLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDbkM7S0FDRjtTQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQix1RUFBMkMsRUFBRTtRQUM1RSxnQkFBZ0I7UUFDaEIsUUFBUSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUMvQjtJQUVELE9BQU8sUUFBUSxDQUFBO0FBQ2pCLENBQUM7QUFoQkQsMEJBZ0JDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUE0QixFQUFFLEVBQUU7SUFDcEQsK0JBQStCO0lBQy9CLGdEQUFnRDtJQUNoRCxFQUFFO0lBQ0Ysc0VBQXNFO0lBQ3RFLGlFQUFpRTtJQUNqRSxnQ0FBZ0M7SUFFaEMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQTtJQUVwRixPQUFPLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsaUJBQWlCLElBQUksRUFBRSxFQUFFO1FBQ3BGO1lBQ0UsV0FBVyxFQUFFLDBDQUFrQixDQUFDLFVBQVU7WUFDMUMsT0FBTyxFQUFFLG9DQUFvQyxJQUFJLEVBQUU7U0FDcEQ7S0FDRixDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLGdCQUFnQixHQUFHLENBQUMsS0FBNEIsRUFBRSxFQUFFO0lBQ3hELCtCQUErQjtJQUMvQixrR0FBa0c7SUFDbEcscUVBQXFFO0lBQ3JFLCtCQUErQjtJQUMvQixPQUFPLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDekMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW52b2NhdGlvblNvdXJjZSwgTGV4Q29kZUhvb2tJbnB1dEV2ZW50IH0gZnJvbSBcIi4uLy4uL3NyYy9zaGFyZWRMaWJyYXJpZXMvTGV4Q29kZUhvb2tJbnRlcmZhY2VzXCJcbmltcG9ydCB7IE1lc3NhZ2VDb250ZW50VHlwZSB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtbGV4LXJ1bnRpbWUtdjJcIlxuaW1wb3J0IHsgSW50ZW50TmFtZXMgfSBmcm9tIFwiLi4vLi4vc3JjL3JlbWluZGVyQm90TGV4MkxhbWJkYS9pbnRlbnRIYW5kbGVycy9jb25zdGFudHNcIlxuXG5jb25zdCBEaWFsb2dIZWxwZXJzID0gcmVxdWlyZShcIi4uLy4uL3NyYy9zaGFyZWRMaWJyYXJpZXMvRGlhbG9nSGVscGVyc1wiKVxuY29uc3QgQ29tbW9uVXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vc3JjL3NoYXJlZExpYnJhcmllcy9Db21tb25VdGlsc1wiKVxuXG5jb25zdCBUSU1FX1NMT1QgPSBcIlRpbWVcIlxuY29uc3QgVElNRV9TTE9UX1ZBTElEQVRJT05fQ09ERV9IT09LX0xBQkVMID0gXCJDYWxsSW50ZW50X1RpbWVTbG90X1ZhbGlkYXRpb25Db2RlSG9va1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50OiBMZXhDb2RlSG9va0lucHV0RXZlbnQpIHtcbiAgbGV0IHJlc3BvbnNlID0gRGlhbG9nSGVscGVycy5wYXNzVGhyb3VnaChldmVudClcbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgY29ycmVjdCBsb2dpYyB0byBydW4gYmFzZWQgb24gd2hhdCBjb2RlIGhvb2sgdGhlIHJlcXVlc3QgaGFzIGNvbWUgZnJvbVxuICAgKi9cbiAgaWYgKGV2ZW50Lmludm9jYXRpb25Tb3VyY2UgPT09IEludm9jYXRpb25Tb3VyY2UuRElBTE9HX0NPREVfSE9PSykge1xuICAgIGlmIChldmVudC5pbnZvY2F0aW9uTGFiZWwgPT09IFRJTUVfU0xPVF9WQUxJREFUSU9OX0NPREVfSE9PS19MQUJFTCkge1xuICAgICAgLy8gdmFsaWRhdGlvbiBvbiB0aW1lIHNsb3RcbiAgICAgIHJlc3BvbnNlID0gdmFsaWRhdGVUaW1lU2xvdChldmVudClcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXZlbnQuaW52b2NhdGlvblNvdXJjZSA9PT0gSW52b2NhdGlvblNvdXJjZS5GVUxGSUxMTUVOVF9DT0RFX0hPT0spIHtcbiAgICAvLyBib29rIHRoZSBjYWxsXG4gICAgcmVzcG9uc2UgPSBmdWxmaWxJbnRlbnQoZXZlbnQpXG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxuLyoqXG4gKiBGb3IgRnVsZmlsbG1lbnQsIHdlIHdpbGwgdGFrZSBhY3Rpb24gb24gYm9vayB0aGUgY2FsbCBhbmQgdGhlbiBzZW5kIGFcbiAqICByZXNwb25zZSB3aXRoIFN0YXRlIG9mIEZ1bGZpbGxlZCBhbmQgYSBEaWFsb2dBY3Rpb24gb2YgQ0xPU0VcbiAqL1xuY29uc3QgZnVsZmlsSW50ZW50ID0gKGV2ZW50OiBMZXhDb2RlSG9va0lucHV0RXZlbnQpID0+IHtcbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAvLyBBREQgTE9HSUMgSEVSRSBUTyBBQ1RVQUxMWSBCT09LIFRIRSBDQUxMIC4uLi5cbiAgLy9cbiAgLy8gSU4gVEhFIFJFQUwgV09STEQgV0UgV09VTEQgQkUgUkVBQ0hJTkcgT1VUIFRPIEVYVEVSTkFMIFNZU1RFTVMgSEVSRVxuICAvLyBGT1IgTk9XIFdFJ1JFIEpVU1QgR09JTkcgVE8gUkVTUE9ORCBBUyBJRiBXRSBESUQgQk9PSyBUSEUgQ0FMTFxuICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIGNvbnN0IHRpbWUgPSBDb21tb25VdGlscy5nZXRTZXNzaW9uU3RhdGVTbG90VmFsdWUoZXZlbnQsIFRJTUVfU0xPVCkuaW50ZXJwcmV0ZWRWYWx1ZVxuXG4gIHJldHVybiBEaWFsb2dIZWxwZXJzLmZ1bGZpbGxJbnRlbnQoZXZlbnQuc2Vzc2lvblN0YXRlLCBldmVudC5yZXF1ZXN0QXR0cmlidXRlcyB8fCB7fSwgW1xuICAgIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBNZXNzYWdlQ29udGVudFR5cGUuUExBSU5fVEVYVCxcbiAgICAgIGNvbnRlbnQ6IGBZb3VyIGNhbGwgaGFzIGJlZW4gc2NoZWR1bGVkIGZvciAke3RpbWV9YCxcbiAgICB9LFxuICBdKVxufVxuXG5jb25zdCB2YWxpZGF0ZVRpbWVTbG90ID0gKGV2ZW50OiBMZXhDb2RlSG9va0lucHV0RXZlbnQpID0+IHtcbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAvLyBMT0dJQyBDT1VMRCBCRSBBRERFRCBIRVJFIFRPIENIRUNLIFRISVMgVElNRSBJUyBBVkFJTEFCTEUgQlkgUkVBQ0hJTkcgT1VUIFRPIE9VUiBCT09LSU5HIFNZU1RFTVxuICAvLyBUSElTIFdPVUxEIEFMTE9XIFVTIFRPIFJFLVBST01QVCBUSEUgVVNFUiBGT1IgQSBORVcgVElNRSBJRiBORUVERURcbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICByZXR1cm4gRGlhbG9nSGVscGVycy5wYXNzVGhyb3VnaChldmVudClcbn1cbiJdfQ==